[{
  "id": 0,
  "title": "Persian Tutor 2",
  "stack": [
    "Angular",
    "Typescript",
    "Java",
    "Spring",
    "PostgreSQL",
    "AWS",
    "Elastic Beanstalk",
    "RDS",
    "S3"
  ],
  "githubLink": "https://github.com/ml-davis/persian_tutor_2",
  "webLink": "http://persiantutor.io",
  "videoLink": null,
  "imagePath": "persian_tutor_2",
  "description": [
    "This is a web application intended to help learn Farsi. Users can browse phrases, look up phrases in search ",
    "and be quizzed on phrases. If the user does not know the answer to a question, he can flag it as an unknown ",
    "phrase. At the end of the quiz, the user will be shown the phrases that he got wrong. At this point he can ",
    "choose to be quizzed again on the unknown phrases. This process repeats until the user has gone through a quiz ",
    "with out flagging any question as unknown. I found this method to be an effective approach for myself as I have ",
    "been learning the language."
  ],
  "motivation": [
    "I began studying Farsi out of interest and to be able to better communicate with my fiance's family who have it ",
    "as their native tongue. Due to the limited amount of resources available, I decided to store phrases in a ",
    "database as I learned them to help me remember. Gradually growing it into a web application seemed the logical ",
    "next step. Another very important factor that impacted my decision in building this app was to improve my skills ",
    "as a developer. I was very interested in learning Angular, Spring, and AWS, and this seemed like a good ",
    "introductory project for me to develop my expertise."
  ],
  "technicalDetails": [
    "Persian Tutor 2 is a primarily an Angular app. It does also make use of a little bit ",
    "of Java Spring and PostgreSQL to fetch and retrieve data. The Angular portion of the app is stored in an S3 ",
    "bucket hosted on AWS and the Java Spring server is hosted on an Elastic Beanstalk instance of AWS. This allows ",
    "these components to be completely decoupled from each other allow them to only communicate via HTTP requests. ",
    "The PostgreSQL database is also decoupled and is stored in an AWS Relational Database Service."
  ]
}, {
  "id": 1,
  "title": "Self Driving Car",
  "stack": [
    "C",
    "C++",
    "OpenCV",
    "Bash",
    "Atmega328",
    "Beaglebone Black"
  ],
  "githubLink": "https://github.com/ml-davis/self_driving_car",
  "webLink": null,
  "videoLink": "https://www.youtube.com/embed/5YsZCfJTV1s",
  "imagePath": "self_driving_car",
  "description": [
    "This self-driving car was the final project of my computer science degree. It was built from scratch by just me ",
    "and a single partner."
  ],
  "motivation": [
    "There were many factors that contributed to us choosing a self-driving car for our final project. One major ",
    "consideration was the challenge. Embedded systems was a fairly unfamiliar subject for us at the time and we ",
    "believed it would be a fun and challenging endeavor. I also believed that it was a great way to build upon ",
    "my fundamentals of computer science and gain a deeper insight into low-level programming. I believe that this ",
    "can help in all areas of programming since it gives me a deeper understanding of how computers work in general. "
  ],
  "technicalDetails": [
    "This project was built at a very low level. All of the wiring and programming was done by ourselves. A much more ",
    "detailed description of the technical details that went into the project can be found in the project report that ",
    "we created for the project."
  ],
  "report": "/portfolio/assets/self_driving_car_report.pdf"
}, {
  "id": 2,
  "title": "Nanogram",
  "stack": [
    "Java",
    "JavaFX",
    "MVC"
  ],
  "githubLink": "https://github.com/ml-davis/nanogram",
  "webLink": null,
  "videoLink": "https://www.youtube.com/embed/xdYiaJIy8S4",
  "imagePath": "nanogram",
  "description": [
    "This is a desktop application of a famous puzzle game called a nanogram. Users can create and solve custom ",
    "puzzles, as well as generate random puzzles of various sizes to solve on their own."
  ],
  "motivation": [
    "A major motivation of this project was to get more experience working with the MVC paradigm. I also thought ",
    "that the puzzle based algorithms would be a fun exercise to improve my algorithmic thinking skills."
  ],
  "technicalDetails": [
    "This program uses Java for its backend and uses JavaFX for its frontend. All of the business logic is achieved ",
    "in the model, which is delegated tasks from the controller. Our frontend is written in fxml, similar to html,",
    "which is used to display the graphical user interface to the user."
  ]
}, {
  "id": 3,
  "title": "Search Engine",
  "stack": [
    "Java",
    "JavaFX"
  ],
  "githubLink": "https://github.com/ml-davis/search_engine_1",
  "webLink": null,
  "videoLink": "https://www.youtube.com/embed/as0ER0kk2Wc",
  "imagePath": "search_engine",
  "description": [
    "The search engine allows users to browse a large number of news articles and query them to find relevant ",
    "articles. There are three different types of searches which can be used to find relevant information."
  ],
  "motivation": [
    "The only real motivation for this particular project was that I thought it sounded like a fun and interesting ",
    "exercise."
  ],
  "technicalDetails": [
    "This search engine parses a large number of files and stores them in a hashmap where the key is the word and ",
    "the value is metadata about the phrase. For example, which articles the word shows up in, how often it shows up, ",
    "etc. This allows us to look up a phrase in constant time, rather than iterating over the whole collection of ",
    "documents and gain useful information fast."
  ]
}, {
  "id": 4,
  "title": "Online Real Estate",
  "stack": [
    "PHP",
    "MySQL",
    "JavaScript",
    "HTML",
    "CSS"
  ],
  "githubLink": "https://github.com/ml-davis/online_real_estate",
  "webLink": null,
  "videoLink": "https://www.youtube.com/embed/Eflp7wcNjOU",
  "imagePath": "online_real_estate",
  "description": [
    "This is a web application which allows users to browse homes for rent as well as advertise their own places. ",
    "Users can filter their search results over specified criteria and create profiles to be used in the application."
  ],
  "motivation": [
    "This was one of my very first web applications. I created it to help teach myself about web technologies."
  ],
  "technicalDetails": [
    "This program uses PHP in the backend to insert and retrieve user data from a database created with MySQL. ",
    "It also uses Javascript, HTML5, and CSS3 to render a nice responsive front-end."
  ]
}, {
  "id": 5,
  "title": "Persian Tutor 1",
  "stack": [
    "Java",
    "JavaFX",
    "MVC"
  ],
  "githubLink": "https://github.com/ml-davis/persian_tutor.git",
  "webLink": null,
  "videoLink": "https://www.youtube.com/embed/qrAtu14MvoA",
  "imagePath": "persian_tutor_1",
  "description": [
    "This was the original Persian learning app. It is very similar to the second one, the main difference being ",
    "the stack used to create it. This one was created with only Java and JavaFX, two technologies I was very ",
    "comfortable with at the time. It was later created with Angular since it was a goal of mine to learn it."
  ],
  "motivation": [
    "I created this app before first meeting my mother-in-law. I wanted to impress her by learning some phrases ",
    "before meeting her and being a fun programming project, I did not hesitate to build it."
  ],
  "technicalDetails": null
}, {
  "id": 6,
  "title": "Game of Life",
  "stack": [
    "C++",
    "TBB",
    "C",
    "Cuda",
    "OpenCL",
    "OpenGL"
  ],
  "githubLink": "https://github.com/ml-davis/game_of_life_tbb",
  "webLink": null,
  "videoLink": "https://www.youtube.com/embed/5eOMqYD8FUc",
  "imagePath": "game_of_life",
  "description": [
    "Conway's Game of Life is a a game where a cell can be spawned or killed based on the number of neighbors that it ",
    "has. If the number of neighbors is less than 2 or greater than 3, the cell will die. If the number of neighbors ",
    "is 2 or 3, the cell will stay alive. If a dead cell has exactly 3 neighbors, it will come to life."
  ],
  "motivation": [
    "The motivation for creating this project was to improve my optimization skills. By gaining a deeper insight of ",
    "lower level concepts and multi-threading using both the GPU and CPU, I was able to optimize the project to ",
    "achieve very high frames per second in my application."
  ],
  "technicalDetails": [
    "There are 3 versions of this application, one created using TBB (Intel's Thread Building Blocks library) and ",
    "C++, another created with Cuda (Nvidia's library for multi-threaded programming on the GPU) and C, and finally a ",
    "version using OpenCL (An open source library which allows computation to be done on both the CPU and GPU ",
    "simultaneously."
  ]
}]
